{
    "continue":{
        "prefix": "continue",
        "body": "if(${1:expression}) continue;",
        "description": "Continue statement"
    },    

    "elseif": {
        "prefix": "elseif",
        "body": [
            "elseif(${1:expression}) {",
            "\t$0",
            "}"
        ],
        "description": "Else if statement"        
    },

    "finally": {
        "prefix": "finally",
        "body": [
            "finally {",
            "\t$0",
            "}"
        ], 
        "description": "Finally statement"
    },

    "list": {
        "prefix": "list",
        "body": "List<${1:Object}> ${2:listName} = new List<${1:Object}>();",
        "description": "Instantiates a new list"
    },

    "listToSet": {
        "prefix": "listToSet",
        "body": "List<${1:Object}> ${2:listName} = new List<${1:Object}>(${3:setName});",
        "description": "Converts a list to set"
    },

    "map": {
        "prefix": "map",
        "body": "Map<${1:key}, ${2:value}> ${3:mapName} = new Map<${1:key}, ${value}>();",
        "description": "Instantiates a new list"
    },

    "mapOfList": {
        "prefix": "mapOfList",
        "body":[
            "for (${1:Object} ${2:element} : ${3:collection}) {",
            "\tif (${4:mapName}.containskey(${2:element}.${5:key})){",
            "\t\t${4:mapName}.put(${2:element}.${5:key}, mapName.get(${2:element}.${5:key}).add(${2:element}));",
            "\t} else {",
            "\t\t${4:mapName}.put(${2:element}.${5:key}, new List<${1:Object}>{${2:element}});",
            "\t}",
            "}"
        ],
        "description": "Populates a map from a collection"
    },    

    "return": {
        "prefix": "return",
        "body": "if(${1:expression}) return;",
        "description": "Return statement"
    },

    "set": {
        "prefix": "set",
        "body": "Set<${1:Object}> ${2:setName} = new Set<${1:Object}>();",
        "description": "Instantiates a new Set"
    },

    "setToList": {
        "prefix": "setToList",
        "body": "Set<${1:Object}> ${2:setName} = new Set<${1:Object}>(${3:listName});",
        "description": "Converts a set to list"
    },

    "soql": {
        "prefix": "soql",
        "body": "[SELECT Id FROM ${1:Object}];",
        "description": "Basic SOQL query"
    },

    "soqlList": {
        "prefix": "soqllist",
        "body": [
            "List<${1:Object}> ${2:listName} = [",
            "\tSELECT Id",
            "\tFROM ${3:Object}",
            "\tWHERE ${4:filter}",
            "];"
        ],
        "description": "New list based on SOQL"
    },

    "soqlMap": {
        "prefix": "soqlMap",
        "body": [
            "Map<Id, ${1:Object}> ${2:mapName} = new Map<Id, ${1:Object}>([",
            "\tSELECT Id",
            "\tFROM ${1:Object}",
            "\tWHERE ${3:filter}",
            "]);"
        ],
        "description": "New map based on SOQL"
    },

    "ternary":{
        "prefix": "ternary",
        "body": "${1:Object} ${2:variable} = (${3:expression}) ? ${4:true} : ${5:false};",
        "description": "Ternary operator"
    },

    "variableList": {
        "prefix": "variableList",
        "body": [
            "List<${1:Object}> ${2:listName} = new List<${1:Object}>{",
            "\t$0",
            "};"
        ],
        "description": "New list with variables"
    },

    "variableMap": {
        "prefix": "variableMap",
        "body": [
            "Map<${1:keyObject}, ${2:valueObject}> ${3:mapName} = new Map<${1:keyObject}, ${2:valueObject}>{",
            "\t${4:key} => ${5:value}",
            "};"
        ],
        "description": "New Map with variables"
    }   
}